# -*- coding: utf-8 -*-
"""Assignment - Python OOPs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z7Zw2exhlWQvF1FA7MdNGlPZJWNLXspk

# **Assignment - Python - OOP's**

**Question 1**

**Write a Python program to demonstrate multiple inheritance.**

**Case 1**

    Employee class has 3 data members EmployeeID, Gender (String), Salary and  PerformanceRating(Out of 5) of type int.
    It has a get() function to get these details from the user.
"""

from datetime import date

class Employee:
    def __init__(self):
        self.EmployeeID = 0
        self.Gender = ""
        self.Salary = 0
        self.PerformanceRating = 0

    def get(self):
        self.EmployeeID = int(input("Enter Employee ID: "))
        self.Gender = input("Enter Gender: ")
        self.Salary = float(input("Enter Salary: "))
        self.PerformanceRating = int(input("Enter Performance Rating (Out of 5): "))

"""**Case 2**

    JoiningDetail class has a data member DateOfJoining of type Date and a function getDoJ to get the Date of joining of employees.

"""

class JoiningDetail:
    def __init__(self):
        self.DateOfJoining = date.today()

    def getDoJ(self):
        year = int(input("Enter Year of Joining: "))
        month = int(input("Enter Month of Joining: "))
        day = int(input("Enter Day of Joining: "))
        self.DateOfJoining = date(year, month, day)

"""**Case 3**

    Information Class uses the marks from Employee class and the DateOfJoining date from the JoiningDetail class
      - To calculate the top 3 Employees based on their Ratings
      - Display, using readData, all the details on these employees in Ascending order of their Date Of Joining.
"""

class Information(Employee, JoiningDetail):
    def __init__(self):
        Employee.__init__(self)
        JoiningDetail.__init__(self)

    def readData(self):
        self.get()
        self.getDoJ()

    def displayData(self):
        print("Employee ID:", self.EmployeeID)
        print("Gender:", self.Gender)
        print("Salary:", self.Salary)
        print("Performance Rating:", self.PerformanceRating)
        print("Date of Joining:", self.DateOfJoining)

if __name__ == "__main__":
    info = Information()
    info.readData()
    print("\nEmployee Information:")
    info.displayData()

"""**Question 2**

**Write a Python program to demonstrate Polymorphism.**
"""

class Vehicle:
    def fare(self, amount):
        return amount

"""**Case 1**

    Class Vehicle with a parameterized function Fare, that takes input value as fare and returns it to calling Objects.

"""

# Create instances of different vehicle types
bus = Vehicle()
car = Vehicle()
train = Vehicle()
truck = Vehicle()
ship = Vehicle()

"""**Case 2**

    Create five separate variables Bus, Car, Train, Truck and Ship that call the Fare function.

"""

# Calculate fares for each vehicle type
bus_fare = bus.fare(50)
car_fare = car.fare(100)
train_fare = train.fare(150)
truck_fare = truck.fare(200)
ship_fare = ship.fare(250)

"""**Case 3**

    Use a third variable TotalFare to store the sum of fare for each Vehicle Type.

"""

# Calculate total fare
total_fare = bus_fare + car_fare + train_fare + truck_fare + ship_fare

"""**Case 4**

    Print the TotalFare.
"""

# Print total fare
print("Total Fare for all vehicles:", total_fare)

"""**Question 3**

**Consider an ongoing test cricket series. Following are the names of the players and their scores in the test1 and 2.**

**Test Match 1 :**

    Dhoni : 56 , Balaji : 94

**Test Match 2 :**
   
    Balaji : 80 , Dravid : 105

    Calculate the highest number of runs scored by an individual cricketer in both of the matches.
"""

def highest_score(matches):
    max_score = 0

    for match in matches.values():
        for score in match.values():
            if score > max_score:
                max_score = score

    return max_score

matches = {
    "Test Match 1": {"Dhoni": 56, "Balaji": 94},
    "Test Match 2": {"Balaji": 80, "Dravid": 105}
}

highest = highest_score(matches)
print("Highest number of runs scored by an individual cricketer in both matches:", highest)

"""**Create a python function Max_Score (M) that reads a dictionary M that recognizes the player with the highest total score.**

    This function will return ( Top player , Total Score ) .
    You can consider the Top player as String who is the highest scorer and Top score as Integer.

    Input : Max_Score({‘test1’:{‘Dhoni’:56, ‘Balaji : 85}, ‘test2’:{‘Dhoni’ 87, ‘Balaji’’:200}})
    Output : (‘Balaji ‘ , 200)
"""

def Max_Score(M):
    max_score = 0
    top_player = ""

    # Dictionary to store total scores of players
    total_scores = {}

    # Calculate total scores for each player
    for match_scores in M.values():
        for player, score in match_scores.items():
            if player in total_scores:
                total_scores[player] += score
            else:
                total_scores[player] = score

    # Find the player with the highest total score
    for player, score in total_scores.items():
        if score > max_score:
            max_score = score
            top_player = player

    return (top_player, max_score)

M = {'test1': {'Dhoni': 56, 'Balaji': 85}, 'test2': {'Dhoni': 87, 'Balaji': 200}}
result = Max_Score(M)
print("Output:", result)

"""**Question 4**

**Create a simple Card game in which there are 8 cards which are randomly chosen from a deck.**

The first card is shown face up. The game asks the player to predict whether the next card in the selection will have a higher or lower value than the currently showing card.

    - For example, say the card that’s shown is a 3. The player chooses “higher,” and the next card is shown.
    - If that card has a higher value, the player is correct.
    - In this example, if the player had chosen “lower,” they would have been incorrect.
    - If the player guesses correctly, they get 20 points.
    - If they choose incorrectly, they lose 15 points.
    - If the next card to be turned over has the same value as the previous card, the player is incorrect.
"""

import random

# Function to create a deck of cards
def create_deck():
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']
    deck = [{'value': value, 'suit': suit} for suit in suits for value in values]
    return deck

# Function to get the value of a card
def card_value(card):
    values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'Jack': 11, 'Queen': 12, 'King': 13, 'Ace': 14}
    return values[card['value']]

# Function to play the card game
def play_card_game():
    deck = create_deck()
    random.shuffle(deck)

    # Show the first card
    current_card = deck.pop()
    print("First card:", current_card['value'], "of", current_card['suit'])

    score = 0

    while deck:
        guess = input("Predict whether the next card will be 'higher', 'lower', or 'same': ").lower()
        next_card = deck.pop()
        print("Next card:", next_card['value'], "of", next_card['suit'])

        current_value = card_value(current_card)
        next_value = card_value(next_card)

        if next_value > current_value:
            if guess == 'higher':
                print("Correct! You gain 20 points.")
                score += 20
            else:
                print("Incorrect! You lose 15 points.")
                score -= 15
        elif next_value < current_value:
            if guess == 'lower':
                print("Correct! You gain 20 points.")
                score += 20
            else:
                print("Incorrect! You lose 15 points.")
                score -= 15
        else:
            print("Incorrect! The next card has the same value as the current card. You lose 15 points.")
            score -= 15

        print("Your current score:", score)

        current_card = next_card

# Play the game
play_card_game()

"""**Question 5**

**Create an empty dictionary called Car_0 . Then fill the dictionary with Keys : color, speed, X_position and Y_position.**

car_0 = {'x_position': 10, 'y_position': 72, 'speed': 'medium'}.

    a) If the speed is slow the coordinates of the X_pos get incremented by 2.

    b) If the speed is Medium the coordinates of the X_pos gets incremented by 9

    c) Now if the speed is Fast the coordinates of the X_pos gets incremented by 22.

    Print the modified dictionary.
"""

# Create an empty dictionary called Car_0
car_0 = {}

# Fill the dictionary with keys: color, speed, X_position, and Y_position
car_0['color'] = 'blue'
car_0['speed'] = 'medium'
car_0['X_position'] = 10
car_0['Y_position'] = 72

# Determine the increment based on speed and update X_position accordingly
speed = car_0['speed']
if speed == 'slow':
    car_0['X_position'] += 2
elif speed == 'medium':
    car_0['X_position'] += 9
elif speed == 'fast':
    car_0['X_position'] += 22

# Print the modified dictionary
print(car_0)

"""**Question 6**

**Show a basic implementation of abstraction in python using the abstract classes.**

Create an abstract class in python.
"""

from abc import ABC, abstractmethod

# Abstract class representing a shape
class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

"""    Implement abstraction with the other classes and base class as abstract class."""

# Concrete class representing a rectangle
class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width


# Concrete class representing a circle
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

# Creating instances of Rectangle and Circle
rectangle = Rectangle(5, 4)
circle = Circle(7)

# Calculating and printing area
print("Area of Rectangle:", rectangle.area())
print("Area of Circle:", circle.area())

"""**Question 7**

**Create a program in python to demonstrate Polymorphism.**

Make use of private and protected members using python name mangling techniques.
"""

class Shape:
    def area(self):
        pass  # Placeholder for child classes to implement


class Rectangle(Shape):
    def __init__(self, length, width):
        self.__length = length
        self._width = width  # protected member

    def area(self):
        return self.__length * self._width


class Circle(Shape):
    def __init__(self, radius):
        self.__radius = radius

    def area(self):
        return 3.14 * self.__radius ** 2

# Creating instances of Rectangle and Circle
rectangle = Rectangle(5, 4)
circle = Circle(7)

# Calculating and printing area
print("Area of Rectangle:", rectangle.area())
print("Area of Circle:", circle.area())

"""**Question 8**

**Given a list of 50 natural numbers from 1-50. Create a function that will take every element from the list and return the square of each element. Use the python map and filter methods to implement the function on the given list.**
"""

def square_of_elements(numbers):
    return list(map(lambda x: x**2, numbers))

# Create a list of 50 natural numbers from 1 to 50
numbers_list = list(range(1, 51))

# Apply the square_of_elements function using map
squared_numbers = square_of_elements(numbers_list)

print(squared_numbers)

"""**Question 9**

**Create a class, Triangle. Its init() method should take self, angle1, angle2, and angle3 as arguments.**
"""

class Triangle:
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

my_triangle = Triangle(60, 60, 60)

# Output the angles
print("Angle 1:", my_triangle.angle1)
print("Angle 2:", my_triangle.angle2)
print("Angle 3:", my_triangle.angle3)

"""**Question 10**

**Create a class variable named number_of_sides and set it equal to 3.**
"""

class Polygon:
    number_of_sides = 3

print(Polygon.number_of_sides)  # Output: 3

# Creating an instance of Polygon (not required to access the class variable)
polygon = Polygon()
print(polygon.number_of_sides)  # Output: 3

"""**Question 11**

**Create a method named check_angles. The sum of a triangle's three angles should return True if the sum is equal to 180, and False otherwise. The method should print whether the angles belong to a triangle or not.**
"""

class Polygon:
    number_of_sides = 3

    def check_angles(self, angle1, angle2, angle3):
        if angle1 + angle2 + angle3 == 180:
            print("The angles belong to a triangle.")
            return True
        else:
            print("The angles do not belong to a triangle.")
            return False

triangle = Polygon()
angle1 = 60
angle2 = 60
angle3 = 60
print(triangle.check_angles(angle1, angle2, angle3))  # Output: The angles belong to a triangle. True

"""**Question 11.1**

**Write methods to verify if the triangle is an acute triangle or obtuse triangle**
"""

class Triangle:
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

    def is_acute_triangle(self):
        return self.angle1 < 90 and self.angle2 < 90 and self.angle3 < 90

    def is_obtuse_triangle(self):
        return self.angle1 > 90 or self.angle2 > 90 or self.angle3 > 90

triangle1 = Triangle(60, 60, 60)
triangle2 = Triangle(90, 45, 45)
triangle3 = Triangle(110, 35, 35)

print("Triangle 1 is an acute triangle:", triangle1.is_acute_triangle())  # Output: True
print("Triangle 2 is an acute triangle:", triangle2.is_acute_triangle())  # Output: False
print("Triangle 3 is an obtuse triangle:", triangle3.is_obtuse_triangle())  # Output: True

"""**Question 11.2**

**Create an instance of the triangle class and call all the defined methods.**
"""

class Triangle:
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

    def is_acute_triangle(self):
        return self.angle1 < 90 and self.angle2 < 90 and self.angle3 < 90

    def is_obtuse_triangle(self):
        return self.angle1 > 90 or self.angle2 > 90 or self.angle3 > 90


# Create an instance of the Triangle class
triangle = Triangle(60, 60, 60)

# Call the defined methods
print("Is the triangle an acute triangle?", triangle.is_acute_triangle())
print("Is the triangle an obtuse triangle?", triangle.is_obtuse_triangle())

"""**Question 11.3**

**Create three child classes of triangle class - isosceles_triangle, right_triangle and equilateral_triangle.**
"""

class Triangle:
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

    def is_acute_triangle(self):
        return self.angle1 < 90 and self.angle2 < 90 and self.angle3 < 90

    def is_obtuse_triangle(self):
        return self.angle1 > 90 or self.angle2 > 90 or self.angle3 > 90


class IsoscelesTriangle(Triangle):
    def __init__(self, base, height, equal_angle):
        super().__init__(equal_angle, equal_angle, 180 - (2 * equal_angle))
        self.base = base
        self.height = height

    def area(self):
        return 0.5 * self.base * self.height


class RightTriangle(Triangle):
    def __init__(self, side1, side2):
        super().__init__(90, 180 - 90 - 45, 45)
        self.side1 = side1
        self.side2 = side2

    def area(self):
        return 0.5 * self.side1 * self.side2


class EquilateralTriangle(Triangle):
    def __init__(self, side):
        super().__init__(60, 60, 60)
        self.side = side

    def area(self):
        return (3 ** 0.5 / 4) * (self.side ** 2)

isosceles = IsoscelesTriangle(5, 4, 45)
print("Isosceles Triangle Area:", isosceles.area())

right = RightTriangle(3, 4)
print("Right Triangle Area:", right.area())

equilateral = EquilateralTriangle(6)
print("Equilateral Triangle Area:", equilateral.area())

"""**Question 11.4**

**Define methods which check for their properties.**
"""

class Triangle:
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

    def is_acute_triangle(self):
        return self.angle1 < 90 and self.angle2 < 90 and self.angle3 < 90

    def is_obtuse_triangle(self):
        return self.angle1 > 90 or self.angle2 > 90 or self.angle3 > 90


class IsoscelesTriangle(Triangle):
    def __init__(self, base, height, equal_angle):
        super().__init__(equal_angle, equal_angle, 180 - (2 * equal_angle))
        self.base = base
        self.height = height

    def area(self):
        return 0.5 * self.base * self.height

    def is_isosceles(self):
        return self.angle1 == self.angle2 or self.angle1 == self.angle3 or self.angle2 == self.angle3


class RightTriangle(Triangle):
    def __init__(self, side1, side2):
        super().__init__(90, 180 - 90 - 45, 45)
        self.side1 = side1
        self.side2 = side2

    def area(self):
        return 0.5 * self.side1 * self.side2

    def is_right_angle(self):
        return self.angle1 == 90 or self.angle2 == 90 or self.angle3 == 90


class EquilateralTriangle(Triangle):
    def __init__(self, side):
        super().__init__(60, 60, 60)
        self.side = side

    def area(self):
        return (3 ** 0.5 / 4) * (self.side ** 2)

    def is_equilateral(self):
        return self.angle1 == self.angle2 == self.angle3 == 60

isosceles = IsoscelesTriangle(5, 4, 45)
print("Isosceles Triangle Area:", isosceles.area())
print("Isosceles Triangle?", isosceles.is_isosceles())

right = RightTriangle(3, 4)
print("Right Triangle Area:", right.area())
print("Right Triangle?", right.is_right_angle())

equilateral = EquilateralTriangle(6)
print("Equilateral Triangle Area:", equilateral.area())
print("Equilateral Triangle?", equilateral.is_equilateral())

"""**Question 11.5**

**Create a class isosceles_right_triangle which inherits from isosceles_triangle and right_triangle.**
"""

class Triangle:
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

    def is_acute_triangle(self):
        return self.angle1 < 90 and self.angle2 < 90 and self.angle3 < 90

    def is_obtuse_triangle(self):
        return self.angle1 > 90 or self.angle2 > 90 or self.angle3 > 90


class IsoscelesRightTriangle(IsoscelesTriangle, RightTriangle):
    def __init__(self, base):
        IsoscelesTriangle.__init__(self, base, (base ** 2 - (base / 2) ** 2) ** 0.5, 45)
        RightTriangle.__init__(self, base, base)

class RightTriangle(Triangle):
    def __init__(self, side1, side2):
        super().__init__(90, 180 - 90 - 45, 45)
        self.side1 = side1
        self.side2 = side2

    def area(self):
        return 0.5 * self.side1 * self.side2

    def is_right_angle(self):
        return self.angle1 == 90 or self.angle2 == 90 or self.angle3 == 90


class IsoscelesRightTriangle(IsoscelesTriangle, RightTriangle):
    def __init__(self, base):
        IsoscelesTriangle.__init__(self, base, (base ** 2 - (base / 2) ** 2) ** 0.5, 45)
        RightTriangle.__init__(self, base, base)

isosceles_right_triangle = IsoscelesRightTriangle(5)
print("Isosceles Right Triangle Area:", isosceles_right_triangle.area())
print("Isosceles Triangle?", isosceles_right_triangle.is_isosceles())
print("Right Triangle?", isosceles_right_triangle.is_right_angle())

"""**Question 11.6**

**Define methods which check for their properties.**
"""

class Triangle:
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

    def is_acute_triangle(self):
        return self.angle1 < 90 and self.angle2 < 90 and self.angle3 < 90

    def is_obtuse_triangle(self):
        return self.angle1 > 90 or self.angle2 > 90 or self.angle3 > 90


class IsoscelesRightTriangle(Triangle):
    def __init__(self, base):
        super().__init__(90, 45, 180 - 90 - 45)
        self.base = base

    def area(self):
        return 0.5 * self.base * ((self.base ** 2) / 4) ** 0.5

    def is_isosceles(self):
        return self.base ** 2 == 2 * self.base ** 2

    def is_right_angle(self):
        return self.angle1 == 90 or self.angle2 == 90 or self.angle3 == 90


isosceles_right_triangle = IsoscelesRightTriangle(5)
print("Isosceles Right Triangle Area:", isosceles_right_triangle.area())
print("Isosceles Triangle?", isosceles_right_triangle.is_isosceles())
print("Right Triangle?", isosceles_right_triangle.is_right_angle())